#+title: Ukko Example Project Summary

This document summarizes the `example` directory, which demonstrates a practical implementation of a multilingual (i18n) blog website using the Ukko static site generator. For a full overview of Ukko's architecture and core concepts, please refer to the main [[file:../PROJECT_SUMMARY.org][PROJECT_SUMMARY.org]] in the parent directory.

* Purpose of the Example

This directory serves as a working demonstration of Ukko's internationalization features. It showcases two primary strategies for handling multilingual content:

1.  *Content-based i18n*: Separating full pages (like blog posts) into language-specific directories.
2.  *String-based i18n*: Using a single template that pulls in translations for UI text from centralized files, perfect for pages with a fixed structure like a landing page.

It also demonstrates data-driven page generation (for tags and categories), advanced templating with Fleet, and comprehensive blog functionality.

* i18n Project Structure Specifics

The project is structured to support both English (`en`) and German (`de`).

- =ukko.yml=: The main configuration now includes an =i18n= block that defines the supported `locales` and sets a `default-locale`.
  #+begin_src yaml
  i18n:
    default-locale: en
    locales: [en, de]
  #+end_src

- =site/i18n/= (Translation Files): This directory holds the centralized string translations. Each language has its own YAML file (=en.yml=, =de.yml=) containing hierarchical key-value pairs for text used in shared templates.
  #+begin_src yaml
  # en.yml example
  landing:
    title: "Welcome to Your Ukko Example Site!"
    welcome: "Welcome!"
    intro: "This is a simple example homepage..."
  blog:
    title: Example Blog
    categories: Categories
    words: words
    min_read: min read
  #+end_src

- =site/en/= and =site/de/=: Language-specific content directories containing posts and other locale-specific content.

- =layouts/=: Contains the HTML layouts (=page.html=, =post.html=, =blog.html=) used by all language versions. They are language-agnostic and use Fleet templating.

- =assets/img/=: Shared static assets including placeholder images for authors and tags.

* Key Content Generation Patterns

This example highlights several distinct patterns for content generation:

**1. Mirrored Structure via String Translation (`site/index.html`)**
This demonstrates creating a page with identical structure across all languages.
- **Source File**: Single =site/index.html=
- **Frontmatter**: Contains =i18n: generate-for-all-locales=
- **Content**: Uses ={{ i18n "landing.title" }}= pattern for text replacement
- **Format**: =fleet= for template processing
- **Outcome**: Generates structurally identical pages with localized text

**2. Independent Content with Linking (`site/en/posts/...` & `site/de/posts/...`)**
For full content pages like blog posts that may differ significantly between languages.
- **Source Files**: Separate files per language (e.g., =en/posts/2024-01-15-a-sample-post.org=)
- **Linking**: Shared =translationKey: sample_post_2024_01_15= in frontmatter
- **Format**: =org= format demonstrating Org-mode support
- **Outcome**: Independent pages that can have completely different content/structure

**3. Dynamic Collection Pages (`site/_category.html` & `site/tags/_tag.html`)**
Advanced data-driven page generation filtering content by language.
- **Categories**: Uses complex Clojure logic to group posts by category, filtered by locale
- **Tags**: Automatically generates tag pages from post metadata
- **Localization**: Both templates include =i18n: generate-for-all-locales= and filter posts by current locale
- **Collection Logic**: Uses sophisticated Clojure code in frontmatter to aggregate and process data

**4. Blog Index with Filtering (`site/blog.html`)**
A comprehensive blog listing page.
- **Content Filtering**: Only shows posts from the current locale (=(:locale ctx)=)
- **Metadata Display**: Shows word count, reading time, categories, and tags
- **Mixed Translation**: Combines translated UI strings with locale-specific content
- **Sidebar**: Dynamic category listing with post counts

* Advanced Features Demonstrated

** Fleet Templating Integration
- Complex logic within templates using =<(...)>= syntax
- Conditional rendering with =if-let= and =for= loops
- Context access via =ctx= object
- Mixed content with both translated strings and dynamic data

** URL Structure & Navigation
- Automatic locale-specific URLs (=/en/posts/...=, =/de/category/...=)
- Cross-language navigation via =translationKey= linking
- Breadcrumb-style navigation with categories and tags

** Content Metadata
- Automatic word count and reading time calculation
- Date formatting and publication metadata
- Category and tag organization
- Author information with structured data markup

** SEO & Standards Compliance
- Schema.org microdata markup for blog posts
- Structured data for authors, articles, and metadata
- Semantic HTML with proper itemscope/itemtype attributes

* File Structure Overview

#+begin_src
example/
├── ukko.yml                    # Main configuration with i18n settings
├── layouts/
│   ├── page.html              # Base page layout
│   ├── post.html              # Blog post layout
│   └── blog.html              # Blog listing layout
├── assets/
│   └── img/                   # Shared images (author/tag placeholders)
├── site/
│   ├── index.html             # Single-source multilingual landing page
│   ├── blog.html              # Blog index (generates per locale)
│   ├── _category.html         # Dynamic category pages
│   ├── atom.xml               # RSS feed
│   ├── sitemap.xml            # XML sitemap
│   ├── css/                   # Styles and SCSS
│   ├── i18n/
│   │   ├── en.yml             # English translations
│   │   └── de.yml             # German translations
│   ├── en/
│   │   └── posts/             # English blog posts
│   ├── de/
│   │   └── posts/             # German blog posts
│   └── tags/
│       └── _tag.html          # Dynamic tag pages
└── data/                      # (Empty in this example)
#+end_src

* How to Run This Example

1. Navigate to the Ukko project root directory (containing both `ukko` and `example`).
2. Run the development server specifying the example directory:
   #+begin_src sh
   # Development server with live reload and browser opening
   lein run -- -d example -s -c -b firefox
   
   # Production build
   lein run -- -d example
   
   # Build with link checking
   lein run -- -d example -l
   #+end_src
3. Access the generated site:
   - English: `http://localhost:8080/en/`
   - German: `http://localhost:8080/de/`
   - Root: `http://localhost:8080/` (redirects based on default locale)

Changes to files in the `example` directory will trigger automatic rebuilds and browser refresh when using the continuous mode (`-c` flag).
